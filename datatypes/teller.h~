#ifndef _TELLER_H_
#define _TELLER_H_
#include "../customer.h"
#include "../../datastructures/heap.h"
#include "../../datastructures/queue.h"

namespace datatypes
{
  class Teller;

  struct teller_finish_time {
    double time_stamp;
    Teller& teller;  // Used to identify finished teller on event 'TELLER_FINISH'.

    bool operator<(event& r)  // Defined to enable use in Heap datastructure.
      return time_stamp < r.time_stamp;
  };

  /*****************************************************************************
    Teller Class.                                                              *
    This class holds all relevant data for describing a Teller.                *
    If a teller is serving a customer, then the time the teller will finish    *
    serving the customer is stored.                                            *
  *****************************************************************************/
  class Teller {
   public:
    Teller(Queue<Customer>& service_queue, Heap<teller_finish_time>& time_manager);

    bool isIdle() { return idle_; }
    double serveNext(double time_stamp);  //TODO: set to take next customer from queue.

   private:
    bool idle_;         // True if the teller is not currently serving a customer.
    double idle_time_;  // Holds the time the teller has spent idle.
    double begin_idle_;  // Holds the time stamp at which the teller started being idle.
    Queue<Customer>& service_queue_;  // Reference to the Teller's assigned queue.
    Heap<teller_finish_time>& time_manager_;
  };
}

#endif  // _Teller_H_
